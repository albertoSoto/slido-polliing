<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Presenter Control - Slido Polling</title>
    <link rel="stylesheet" href="/css/tailwind.css">
    <link rel="stylesheet" href="/css/marp-polling-themes.css">
</head>
<body class="bg-dark-900 text-white font-sans overflow-hidden" id="presenter-body">
    <!-- Main Layout -->
    <main class="presenter-grid h-screen" id="main-content">
        <!-- Slide Area (80% width) -->
        <section class="slide-area" id="slide-area">
            <!-- Welcome/CTA Screen -->
            <div id="welcome-screen" class="cta-screen">
                <div class="max-w-2xl">
                    <div class="text-8xl mb-8">üé§</div>
                    <h1 class="text-4xl font-bold mb-4 text-primary-400">Slido Polling Presenter</h1>
                    <p class="text-xl text-gray-300 mb-8">Load a presentation to begin your interactive session</p>
                    
                    <!-- Presentation Loader -->
                    <div class="bg-dark-800 rounded-xl p-6 max-w-md mx-auto">
                        <div class="space-y-4">
                            {{#if presentations}}
                            <select id="presentation-select" class="w-full bg-dark-700 text-white border border-dark-600 rounded-lg px-4 py-3 text-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" onchange="updatePresentationName()">
                                <option value="">Choose a presentation...</option>
                                {{#each presentations}}
                                <option value="{{name}}" data-title="{{title}}">{{title}} ({{name}})</option>
                                {{/each}}
                            </select>
                            {{else}}
                            <input type="text" id="presentation-name" placeholder="Enter presentation name" value="sample-presentation" 
                                   class="w-full bg-dark-700 text-white border border-dark-600 rounded-lg px-4 py-3 text-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                            {{/if}}
                            <button onclick="loadPresentation()" id="load-btn" class="btn-primary w-full text-lg py-3">
                                üöÄ Load Presentation
                            </button>
                        </div>
                    </div>
                    
                    <!-- Status Info -->
                    <div class="mt-8 text-sm text-gray-500">
                        <div id="ngrok-status" class="hidden">
                            üåê Public access: <span id="public-url" class="text-green-400"></span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Presentation View -->
            <div id="presentation-view" class="hidden flex flex-col h-full">
                <!-- Slide Controls Bar -->
                <div class="slide-controls-bar">
                    <div class="flex items-center gap-4">
                        <!-- Presentation Info -->
                        <div class="flex items-center gap-3">
                            <div class="text-lg font-semibold text-primary-400">üìä</div>
                            <div>
                                <div class="font-medium" id="presentation-title">Presentation</div>
                                <div class="text-sm text-gray-400">
                                    Slide <span id="slide-counter">1 / 1</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Current Slide Info -->
                        <div class="flex-1 text-center">
                            <div class="font-medium" id="slide-title">Slide Title</div>
                            <div class="text-xs text-gray-400" id="slide-type-info">content</div>
                        </div>
                    </div>
                    
                    <div class="flex items-center gap-3">
                        <!-- Navigation Controls -->
                        <div class="flex gap-2">
                            <button onclick="navigate('prev')" id="prev-btn" class="btn-secondary text-sm" disabled>
                                ‚Üê Previous
                            </button>
                            <button onclick="navigate('next')" id="next-btn" class="btn-secondary text-sm" disabled>
                                Next ‚Üí
                            </button>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="flex gap-2">
                            <button onclick="toggleFullscreen()" class="btn-secondary text-sm" id="fullscreen-btn">
                                ‚õ∂ Fullscreen
                            </button>
                            <button onclick="loadNewPresentation()" class="btn-secondary text-sm">
                                üìÇ Change
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Slide Display Area -->
                <div class="flex-1 relative">
                    <!-- Slide Container -->
                    <div class="slide-container w-full h-full flex items-center justify-center p-6" id="slide-container">
                        <!-- Marp CSS Injection -->
                        <div id="marp-css"></div>
                        
                        <!-- Slide Content -->
                        <div id="slide-content" class="w-full h-full flex items-center justify-center aspect-slide max-w-none">
                            <div id="slide-html" class="w-full h-full overflow-hidden"></div>
                        </div>
                    </div>
                    
                    <!-- Overlay Navigation (for keyboard users) -->
                    <div class="overlay-controls" id="overlay-controls">
                        <button onclick="navigate('prev')" class="slide-nav-btn opacity-50 hover:opacity-100" disabled>
                            ‚Üê
                        </button>
                        <div class="bg-black/50 backdrop-blur-sm rounded-full px-3 py-1 text-white text-xs">
                            <span id="overlay-counter">1 / 1</span>
                        </div>
                        <button onclick="navigate('next')" class="slide-nav-btn opacity-50 hover:opacity-100" disabled>
                            ‚Üí
                        </button>
                    </div>
                </div>
            </div>
        </section>

        <!-- Control Sidebar (20% width) -->
        <aside class="control-sidebar space-y-3" id="control-sidebar">
            <!-- Current Slide Details -->
            <div class="card" id="slide-info-card">
                <h3 class="text-sm font-semibold mb-2 text-primary-400">üìã Slide Info</h3>
                <div id="slide-info" class="space-y-1 text-xs">
                    <div class="flex justify-between">
                        <span class="text-gray-400">Title:</span>
                        <span id="sidebar-slide-title" class="text-white">-</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Type:</span>
                        <span id="sidebar-slide-type" class="text-white">-</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Position:</span>
                        <span id="sidebar-slide-position" class="text-white">- / -</span>
                    </div>
                </div>
            </div>

            <!-- Poll Control (Context-Aware) -->
            <div class="card hidden" id="poll-control-card">
                <h3 class="text-sm font-semibold mb-2 text-primary-400">üìä Poll</h3>
                
                <!-- No Active Poll -->
                <div id="no-poll" class="text-center text-gray-400 py-3">
                    <div class="text-2xl mb-1">üó≥Ô∏è</div>
                    <p class="text-xs">No active poll</p>
                </div>
                
                <!-- Active Poll -->
                <div id="active-poll" class="hidden space-y-3">
                    <div class="flex items-center justify-between">
                        <div id="poll-status-badge" class="poll-inactive-indicator text-xs">Inactive</div>
                        <div id="vote-count" class="text-sm font-bold text-primary-400">0 votes</div>
                    </div>
                    
                    <div>
                        <div class="text-xs text-gray-400 mb-1">Question:</div>
                        <div id="poll-question" class="text-xs font-medium text-white"></div>
                    </div>
                    
                    <div class="flex gap-1">
                        <button onclick="manualStartPoll()" id="start-poll-btn" class="btn-primary text-xs flex-1 py-1">
                            ‚ñ∂Ô∏è
                        </button>
                        <button onclick="stopCurrentPoll()" id="stop-poll-btn" class="btn-danger text-xs flex-1 py-1">
                            ‚èπÔ∏è
                        </button>
                    </div>
                </div>
                
                <!-- Poll Preview -->
                <div id="poll-preview" class="hidden space-y-2">
                    <div class="text-xs text-gray-400">Poll Available:</div>
                    <div id="preview-question" class="text-xs font-medium text-white"></div>
                    <div id="preview-options" class="grid grid-cols-1 gap-1"></div>
                    <button onclick="activatePoll()" class="btn-primary w-full text-xs py-1">
                        üöÄ Activate
                    </button>
                </div>
            </div>

            <!-- QR Code Display -->
            <div class="card hidden" id="qr-control-card">
                <h3 class="text-sm font-semibold mb-2 text-primary-400">üì± QR Code</h3>
                
                <div id="qr-display" class="text-center space-y-2">
                    <div class="qr-container">
                        <img id="qr-code" class="w-full max-w-[150px] mx-auto rounded-lg" alt="QR Code">
                    </div>
                    <div class="text-xs text-gray-400 break-all" id="vote-url"></div>
                    <div class="text-xs">
                        <span class="text-gray-400">Poll ID:</span> 
                        <span id="current-poll-id" class="text-primary-400">-</span>
                    </div>
                </div>
            </div>

            <!-- Live Results -->
            <div class="card hidden" id="results-card">
                <h3 class="text-sm font-semibold mb-2 text-primary-400">üìà Results</h3>
                <div class="results-chart">
                    <canvas id="chart" width="250" height="150"></canvas>
                </div>
            </div>

            <!-- Keyboard Shortcuts -->
            <div class="card">
                <h3 class="text-sm font-semibold mb-2 text-primary-400">‚å®Ô∏è Shortcuts</h3>
                <div class="space-y-1 text-xs text-gray-400">
                    <div class="flex justify-between">
                        <span>‚Üê ‚Üí</span>
                        <span>Navigate</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Space</span>
                        <span>Next slide</span>
                    </div>
                    <div class="flex justify-between">
                        <span>F</span>
                        <span>Fullscreen</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Esc</span>
                        <span>Exit fullscreen</span>
                    </div>
                </div>
            </div>
        </aside>
    </main>

    <!-- Fullscreen Overlay -->
    <div id="fullscreen-overlay" class="fixed inset-0 bg-black z-50 hidden">
        <div class="fullscreen-slide">
            <div id="fullscreen-content" class="w-full h-full flex items-center justify-center">
                <!-- Fullscreen slide content -->
            </div>
            
            <!-- Fullscreen Controls -->
            <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex gap-4">
                <button onclick="navigate('prev')" class="slide-nav-btn">‚Üê Prev</button>
                <button onclick="toggleFullscreen()" class="slide-nav-btn">Exit Fullscreen</button>
                <button onclick="navigate('next')" class="slide-nav-btn">Next ‚Üí</button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Global Variables
        const socket = io();
        let currentPoll = null;
        let presentationState = null;
        let resultsChart = null;
        let isFullscreen = false;
        let currentSlideHasPoll = false;

        // DOM Elements
        const elements = {
            welcomeScreen: document.getElementById('welcome-screen'),
            presentationView: document.getElementById('presentation-view'),
            slideHtml: document.getElementById('slide-html'),
            slideContainer: document.getElementById('slide-container'),
            slideCounter: document.getElementById('slide-counter'),
            overlayCounter: document.getElementById('overlay-counter'),
            overlayControls: document.getElementById('overlay-controls'),
            prevBtn: document.getElementById('prev-btn'),
            nextBtn: document.getElementById('next-btn'),
            slideTitle: document.getElementById('slide-title'),
            slideTypeInfo: document.getElementById('slide-type-info'),
            sidebarSlideTitle: document.getElementById('sidebar-slide-title'),
            sidebarSlideType: document.getElementById('sidebar-slide-type'),
            sidebarSlidePosition: document.getElementById('sidebar-slide-position'),
            presentationTitle: document.getElementById('presentation-title'),
            pollControlCard: document.getElementById('poll-control-card'),
            qrControlCard: document.getElementById('qr-control-card'),
            resultsCard: document.getElementById('results-card'),
            noPoll: document.getElementById('no-poll'),
            activePoll: document.getElementById('active-poll'),
            pollPreview: document.getElementById('poll-preview'),
            pollStatusBadge: document.getElementById('poll-status-badge'),
            voteCount: document.getElementById('vote-count'),
            pollQuestion: document.getElementById('poll-question'),
            qrCode: document.getElementById('qr-code'),
            voteUrl: document.getElementById('vote-url'),
            currentPollId: document.getElementById('current-poll-id'),
            fullscreenOverlay: document.getElementById('fullscreen-overlay'),
            fullscreenContent: document.getElementById('fullscreen-content'),
            marpCss: document.getElementById('marp-css'),
            presentationName: document.getElementById('presentation-name')
        };

        // Keyboard Navigation
        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'SELECT') return;
            
            switch(event.key) {
                case 'ArrowLeft':
                    event.preventDefault();
                    navigate('prev');
                    break;
                case 'ArrowRight':
                case ' ':
                    event.preventDefault();
                    navigate('next');
                    break;
                case 'f':
                case 'F':
                    event.preventDefault();
                    toggleFullscreen();
                    break;
                case 'Escape':
                    if (isFullscreen) {
                        event.preventDefault();
                        toggleFullscreen();
                    }
                    break;
            }
        });

        // Presentation Management
        function updatePresentationName() {
            const select = document.getElementById('presentation-select');
            const input = elements.presentationName;
            if (select && input && select.value) {
                input.value = select.value;
            }
        }

        async function loadPresentation() {
            let name = '';
            const select = document.getElementById('presentation-select');
            const input = elements.presentationName;
            
            if (select && select.value) {
                name = select.value;
                const selectedOption = select.options[select.selectedIndex];
                const title = selectedOption.getAttribute('data-title') || name;
                elements.presentationTitle.textContent = title;
            } else if (input && input.value) {
                name = input.value;
                elements.presentationTitle.textContent = name;
            }
            
            if (!name) return;
            
            try {
                const response = await fetch(`/api/presentation/load/${name}`);
                if (response.ok) {
                    const data = await response.json();
                    presentationState = data;
                    showPresentationView();
                    updateUI();
                } else {
                    alert('Failed to load presentation');
                }
            } catch (error) {
                console.error('Load failed:', error);
                alert('Failed to load presentation');
            }
        }

        function loadNewPresentation() {
            elements.welcomeScreen.classList.remove('hidden');
            elements.presentationView.classList.add('hidden');
            presentationState = null;
        }

        function showPresentationView() {
            elements.welcomeScreen.classList.add('hidden');
            elements.presentationView.classList.remove('hidden');
        }

        // Navigation
        async function navigate(direction) {
            if (!presentationState) return;
            
            try {
                const response = await fetch(`/api/presentation/navigate/${direction}`, {
                    method: 'POST'
                });
                if (response.ok) {
                    const data = await response.json();
                    presentationState = data;
                    updateUI();
                }
            } catch (error) {
                console.error('Navigation failed:', error);
            }
        }

        // Fullscreen Management
        function toggleFullscreen() {
            isFullscreen = !isFullscreen;
            
            if (isFullscreen) {
                elements.fullscreenOverlay.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
                if (presentationState?.currentSlide) {
                    updateFullscreenContent(presentationState.currentSlide);
                }
            } else {
                elements.fullscreenOverlay.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            }
            
            const btn = document.getElementById('fullscreen-btn');
            btn.textContent = isFullscreen ? 'üî≤ Exit Fullscreen' : '‚õ∂ Fullscreen';
        }

        function updateFullscreenContent(slide) {
            if (!isFullscreen) return;
            
            let html = slide.htmlContent || slide.content;
            if (slide.type) {
                html = `<section class="${slide.type}">${html}</section>`;
            } else {
                html = `<section>${html}</section>`;
            }
            
            elements.fullscreenContent.innerHTML = html;
            
            // Inject CSS
            if (presentationState.css) {
                const style = document.createElement('style');
                style.textContent = presentationState.css;
                elements.fullscreenContent.appendChild(style);
            }
        }

        // Poll Management
        async function stopCurrentPoll() {
            if (!currentPoll) return;
            
            try {
                const response = await fetch(`/api/poll/${currentPoll.id}/stop`, {
                    method: 'POST'
                });
                if (response.ok) {
                    currentPoll = null;
                    updatePollUI();
                }
            } catch (error) {
                console.error('Stop poll failed:', error);
            }
        }

        function activatePoll() {
            console.log('Activating poll for current slide');
        }

        function manualStartPoll() {
            console.log('Manual poll start');
        }

        // UI Update Functions
        function updateUI() {
            if (!presentationState) return;
            
            const { slideIndex, totalSlides, currentSlide, css } = presentationState;
            
            // Update counters
            elements.slideCounter.textContent = `${slideIndex + 1} / ${totalSlides}`;
            elements.overlayCounter.textContent = `${slideIndex + 1} / ${totalSlides}`;
            
            // Update slide info
            elements.slideTitle.textContent = currentSlide?.title || 'Untitled';
            elements.slideTypeInfo.textContent = currentSlide?.type || 'content';
            elements.sidebarSlideTitle.textContent = currentSlide?.title || 'Untitled';
            elements.sidebarSlideType.textContent = currentSlide?.type || 'content';
            elements.sidebarSlidePosition.textContent = `${slideIndex + 1} / ${totalSlides}`;
            
            // Update navigation buttons
            const isFirst = slideIndex === 0;
            const isLast = slideIndex >= totalSlides - 1;
            
            elements.prevBtn.disabled = isFirst;
            elements.nextBtn.disabled = isLast;
            
            // Update overlay controls
            const overlayPrev = elements.overlayControls.querySelector('button:first-child');
            const overlayNext = elements.overlayControls.querySelector('button:last-child');
            overlayPrev.disabled = isFirst;
            overlayNext.disabled = isLast;
            
            // Update slide content
            if (currentSlide) {
                updateSlideContent(currentSlide);
                updateContextAwareUI(currentSlide);
                
                if (isFullscreen) {
                    updateFullscreenContent(currentSlide);
                }
            }
        }

        function updateSlideContent(slide) {
            let html = slide.htmlContent || slide.content;
            
            if (slide.type) {
                html = `<section class="${slide.type}">${html}</section>`;
            } else {
                html = `<section>${html}</section>`;
            }
            
            elements.slideHtml.innerHTML = html;
            
            // Inject Marp CSS
            if (presentationState.css) {
                elements.marpCss.innerHTML = `<style>${presentationState.css}</style>`;
            }
        }

        function updateContextAwareUI(slide) {
            currentSlideHasPoll = slide.poll || slide.type === 'poll';
            const hasActivePoll = currentPoll && currentPoll.active;
            const showResults = slide.type === 'results';
            
            // Show/hide poll controls
            if (currentSlideHasPoll || hasActivePoll) {
                elements.pollControlCard.classList.remove('hidden');
                
                if (hasActivePoll) {
                    elements.noPoll.classList.add('hidden');
                    elements.activePoll.classList.remove('hidden');
                    elements.pollPreview.classList.add('hidden');
                } else if (slide.poll) {
                    elements.noPoll.classList.add('hidden');
                    elements.activePoll.classList.add('hidden');
                    elements.pollPreview.classList.remove('hidden');
                    updatePollPreview(slide.poll);
                } else {
                    elements.noPoll.classList.remove('hidden');
                    elements.activePoll.classList.add('hidden');
                    elements.pollPreview.classList.add('hidden');
                }
            } else {
                elements.pollControlCard.classList.add('hidden');
            }
            
            // Show/hide QR code
            if (hasActivePoll) {
                elements.qrControlCard.classList.remove('hidden');
                loadQRCode(currentPoll.id);
            } else {
                elements.qrControlCard.classList.add('hidden');
            }
            
            // Show/hide results
            if (showResults && hasActivePoll) {
                elements.resultsCard.classList.remove('hidden');
                showResultsChart();
            } else {
                elements.resultsCard.classList.add('hidden');
            }
        }

        function updatePollPreview(poll) {
            document.getElementById('preview-question').textContent = poll.question;
            const optionsDiv = document.getElementById('preview-options');
            optionsDiv.innerHTML = '';
            
            poll.options.forEach((option, index) => {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'text-xs bg-dark-700 px-2 py-1 rounded text-gray-300 text-center';
                optionDiv.textContent = `${index + 1}. ${option}`;
                optionsDiv.appendChild(optionDiv);
            });
        }

        function updatePollUI() {
            if (currentPoll) {
                elements.pollStatusBadge.textContent = currentPoll.active ? 'Active' : 'Inactive';
                elements.pollStatusBadge.className = currentPoll.active ? 'poll-active-indicator text-xs' : 'poll-inactive-indicator text-xs';
                elements.voteCount.textContent = `${currentPoll.totalVotes} votes`;
                elements.pollQuestion.textContent = currentPoll.question;
                elements.currentPollId.textContent = currentPoll.id;
            }
            
            updateContextAwareUI(presentationState?.currentSlide);
        }

        async function loadQRCode(pollId) {
            try {
                const response = await fetch(`/api/qr/${pollId}`);
                if (response.ok) {
                    const data = await response.json();
                    elements.qrCode.src = data.qrCode;
                    elements.voteUrl.textContent = data.voteUrl;
                }
            } catch (error) {
                console.error('Failed to load QR code:', error);
            }
        }

        function showResultsChart() {
            if (!currentPoll) return;
            
            const ctx = document.getElementById('chart').getContext('2d');
            
            if (resultsChart) {
                resultsChart.destroy();
            }
            
            const labels = currentPoll.options.map(opt => opt.text);
            const data = currentPoll.options.map(opt => opt.votes);
            
            resultsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Votes',
                        data: data,
                        backgroundColor: [
                            '#667eea', '#f093fb', '#74b9ff', '#fd79a8', '#00cec9'
                        ].slice(0, data.length),
                        borderRadius: 4,
                        borderSkipped: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: currentPoll.question,
                            color: '#fff',
                            font: { size: 10 }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                color: '#9ca3af',
                                font: { size: 9 }
                            },
                            grid: { color: '#374151' }
                        },
                        x: {
                            ticks: { 
                                color: '#9ca3af',
                                font: { size: 9 }
                            },
                            grid: { color: '#374151' }
                        }
                    }
                }
            });
        }

        // Socket Events
        socket.on('poll-started', (poll) => {
            currentPoll = poll;
            updatePollUI();
        });
        
        socket.on('vote-update', (poll) => {
            if (currentPoll && currentPoll.id === poll.id) {
                currentPoll = poll;
                updatePollUI();
                
                if (resultsChart) {
                    resultsChart.data.datasets[0].data = poll.options.map(opt => opt.votes);
                    resultsChart.update('none');
                }
            }
        });
        
        socket.on('poll-stopped', (poll) => {
            if (currentPoll && currentPoll.id === poll.id) {
                currentPoll.active = false;
                updatePollUI();
            }
        });
        
        socket.on('slide-changed', (data) => {
            presentationState = data;
            updateUI();
        });

        // Initialize
        fetch('/api/presentation/state')
            .then(response => response.json())
            .then(data => {
                if (data.ngrokUrl) {
                    document.getElementById('ngrok-status').classList.remove('hidden');
                    document.getElementById('public-url').textContent = data.ngrokUrl;
                }
                
                if (data.totalSlides > 0) {
                    presentationState = data;
                    showPresentationView();
                    updateUI();
                }
            })
            .catch(console.error);
    </script>
</body>
</html>