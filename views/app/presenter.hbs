<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Presenter Control - Slido Polling</title>
    <link rel="stylesheet" href="/css/tailwind.css">
    <link rel="stylesheet" href="/css/marp-polling-themes.css">
</head>
<body class="bg-dark-900 text-white font-sans overflow-hidden" id="presenter-body">
    <!-- Header -->
    <header class="bg-dark-800 border-b border-dark-600 px-6 py-3 flex items-center justify-between relative z-30">
        <div class="flex items-center gap-4">
            <h1 class="text-xl font-bold text-primary-400">üìä Slido Polling - Presenter</h1>
            <div class="text-sm text-gray-400" id="presentation-info">
                <span id="presentation-name">No presentation loaded</span>
            </div>
        </div>
        
        <div class="flex items-center gap-4">
            <!-- Presentation Loader -->
            <div class="flex items-center gap-3">
                {{#if presentations}}
                <select id="presentation-select" class="bg-dark-700 text-white border border-dark-600 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent" onchange="updatePresentationName()">
                    <option value="">Choose presentation...</option>
                    {{#each presentations}}
                    <option value="{{name}}" data-title="{{title}}">{{title}} ({{name}})</option>
                    {{/each}}
                </select>
                {{else}}
                <input type="text" id="presentation-name" placeholder="presentation-name" value="sample-presentation" 
                       class="bg-dark-700 text-white border border-dark-600 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                {{/if}}
                <button onclick="loadPresentation()" id="load-btn" class="btn-primary text-sm">
                    üìÇ Load
                </button>
            </div>
            
            <!-- Status Indicators -->
            <div class="flex items-center gap-3">
                <div id="ngrok-status" class="hidden text-sm text-green-400">
                    üåê <span id="public-url"></span>
                </div>
                
                <!-- Fullscreen Toggle -->
                <button onclick="toggleFullscreen()" class="btn-secondary text-sm" id="fullscreen-btn">
                    ‚õ∂ Fullscreen
                </button>
            </div>
        </div>
    </header>

    <!-- Main Layout -->
    <main class="presenter-grid h-screen pt-16" id="main-content">
        <!-- Slide Area (75% width) -->
        <section class="slide-area bg-dark-800 flex flex-col relative" id="slide-area">
            <!-- No Presentation State -->
            <div id="no-presentation" class="flex-1 flex items-center justify-center">
                <div class="text-center text-gray-400">
                    <div class="text-6xl mb-4">üìä</div>
                    <h2 class="text-2xl font-semibold mb-2">No presentation loaded</h2>
                    <p>Select a presentation from the dropdown and click "Load" to begin</p>
                </div>
            </div>
            
            <!-- Slide Display -->
            <div id="slide-display" class="flex-1 hidden relative">
                <!-- Slide Container -->
                <div class="slide-container w-full h-full flex items-center justify-center p-4" id="slide-container">
                    <!-- Marp CSS Injection -->
                    <div id="marp-css"></div>
                    
                    <!-- Slide Content -->
                    <div id="slide-content" class="w-full h-full flex items-center justify-center aspect-slide max-w-none">
                        <div id="slide-html" class="w-full h-full overflow-hidden"></div>
                    </div>
                </div>
                
                <!-- Overlay Navigation Controls -->
                <div class="overlay-controls" id="overlay-controls">
                    <button onclick="navigate('prev')" id="prev-btn" class="slide-nav-btn" disabled>
                        ‚Üê Prev
                    </button>
                    <div class="bg-black/50 backdrop-blur-sm rounded-full px-4 py-2 text-white text-sm">
                        <span id="slide-counter">0 / 0</span>
                    </div>
                    <button onclick="navigate('next')" id="next-btn" class="slide-nav-btn" disabled>
                        Next ‚Üí
                    </button>
                </div>
                
                <!-- Slide Controls -->
                <div class="absolute top-4 right-4 flex gap-2" id="slide-controls">
                    <button onclick="toggleSlidePlay()" id="play-btn" class="bg-black/50 hover:bg-black/70 text-white p-2 rounded-lg transition-all duration-200 backdrop-blur-sm hidden">
                        ‚ñ∂Ô∏è Play
                    </button>
                    <button onclick="toggleSlidePlay()" id="stop-btn" class="bg-black/50 hover:bg-black/70 text-white p-2 rounded-lg transition-all duration-200 backdrop-blur-sm hidden">
                        ‚è∏Ô∏è Stop
                    </button>
                </div>
            </div>
        </section>

        <!-- Control Sidebar (25% width) -->
        <aside class="control-sidebar space-y-4" id="control-sidebar">
            <!-- Slide Information -->
            <div class="card" id="slide-info-card">
                <h3 class="text-lg font-semibold mb-3 text-primary-400">üìã Current Slide</h3>
                <div id="slide-info" class="space-y-2">
                    <div class="text-sm text-gray-300">
                        <span class="font-medium">Title:</span> 
                        <span id="slide-title" class="text-white">No slide</span>
                    </div>
                    <div class="text-sm text-gray-300">
                        <span class="font-medium">Type:</span> 
                        <span id="slide-type" class="text-white">-</span>
                    </div>
                    <div class="text-sm text-gray-300">
                        <span class="font-medium">Position:</span> 
                        <span id="slide-position" class="text-white">- / -</span>
                    </div>
                </div>
            </div>

            <!-- Poll Control (Context-Aware) -->
            <div class="card hidden" id="poll-control-card">
                <h3 class="text-lg font-semibold mb-3 text-primary-400">üìä Poll Control</h3>
                
                <!-- No Active Poll -->
                <div id="no-poll" class="text-center text-gray-400 py-4">
                    <div class="text-3xl mb-2">üó≥Ô∏è</div>
                    <p class="text-sm">No active poll</p>
                </div>
                
                <!-- Active Poll -->
                <div id="active-poll" class="hidden space-y-4">
                    <div class="flex items-center justify-between">
                        <div id="poll-status-badge" class="poll-inactive-indicator">Inactive</div>
                        <div id="vote-count" class="text-lg font-bold text-primary-400">0 votes</div>
                    </div>
                    
                    <div>
                        <div class="text-sm font-medium text-gray-300 mb-2">Question:</div>
                        <div id="poll-question" class="text-white font-medium"></div>
                    </div>
                    
                    <div class="flex gap-2">
                        <button onclick="manualStartPoll()" id="start-poll-btn" class="btn-primary text-sm flex-1">
                            ‚ñ∂Ô∏è Start
                        </button>
                        <button onclick="stopCurrentPoll()" id="stop-poll-btn" class="btn-danger text-sm flex-1">
                            ‚èπÔ∏è Stop
                        </button>
                    </div>
                </div>
                
                <!-- Poll Preview (for poll-capable slides) -->
                <div id="poll-preview" class="hidden space-y-3">
                    <div class="text-sm font-medium text-gray-300">Poll Available:</div>
                    <div id="preview-question" class="text-white font-medium"></div>
                    <div id="preview-options" class="responsive-grid-sm"></div>
                    <button onclick="activatePoll()" class="btn-primary w-full text-sm">
                        üöÄ Activate Poll
                    </button>
                </div>
            </div>

            <!-- QR Code Display (Context-Aware) -->
            <div class="card hidden" id="qr-control-card">
                <h3 class="text-lg font-semibold mb-3 text-primary-400">üì± QR Code</h3>
                
                <div id="qr-display" class="text-center space-y-3">
                    <div class="qr-container">
                        <img id="qr-code" class="w-full max-w-[200px] mx-auto rounded-lg" alt="QR Code">
                    </div>
                    <div class="text-xs text-gray-400 break-all" id="vote-url"></div>
                    <div class="text-sm text-gray-300">
                        <span class="font-medium">Poll ID:</span> 
                        <span id="current-poll-id" class="text-primary-400">-</span>
                    </div>
                </div>
            </div>

            <!-- Live Results (when available) -->
            <div class="card hidden" id="results-card">
                <h3 class="text-lg font-semibold mb-3 text-primary-400">üìà Live Results</h3>
                <div class="results-chart">
                    <canvas id="chart" width="300" height="200"></canvas>
                </div>
            </div>
        </aside>
    </main>

    <!-- Fullscreen Overlay -->
    <div id="fullscreen-overlay" class="fixed inset-0 bg-black z-50 hidden">
        <div class="fullscreen-slide">
            <div id="fullscreen-content" class="w-full h-full flex items-center justify-center">
                <!-- Fullscreen slide content -->
            </div>
            
            <!-- Fullscreen Controls -->
            <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex gap-4">
                <button onclick="navigate('prev')" class="slide-nav-btn">‚Üê Prev</button>
                <button onclick="toggleFullscreen()" class="slide-nav-btn">Exit Fullscreen</button>
                <button onclick="navigate('next')" class="slide-nav-btn">Next ‚Üí</button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Global Variables
        const socket = io();
        let currentPoll = null;
        let presentationState = null;
        let resultsChart = null;
        let isFullscreen = false;
        let currentSlideHasPoll = false;

        // DOM Elements
        const elements = {
            noPresentation: document.getElementById('no-presentation'),
            slideDisplay: document.getElementById('slide-display'),
            slideHtml: document.getElementById('slide-html'),
            slideContainer: document.getElementById('slide-container'),
            overlayControls: document.getElementById('overlay-controls'),
            slideCounter: document.getElementById('slide-counter'),
            prevBtn: document.getElementById('prev-btn'),
            nextBtn: document.getElementById('next-btn'),
            slideTitle: document.getElementById('slide-title'),
            slideType: document.getElementById('slide-type'),
            slidePosition: document.getElementById('slide-position'),
            pollControlCard: document.getElementById('poll-control-card'),
            qrControlCard: document.getElementById('qr-control-card'),
            resultsCard: document.getElementById('results-card'),
            noPoll: document.getElementById('no-poll'),
            activePoll: document.getElementById('active-poll'),
            pollPreview: document.getElementById('poll-preview'),
            pollStatusBadge: document.getElementById('poll-status-badge'),
            voteCount: document.getElementById('vote-count'),
            pollQuestion: document.getElementById('poll-question'),
            qrCode: document.getElementById('qr-code'),
            voteUrl: document.getElementById('vote-url'),
            currentPollId: document.getElementById('current-poll-id'),
            fullscreenOverlay: document.getElementById('fullscreen-overlay'),
            fullscreenContent: document.getElementById('fullscreen-content'),
            marpCss: document.getElementById('marp-css'),
            presentationName: document.getElementById('presentation-name')
        };

        // Keyboard Navigation
        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'SELECT') return;
            
            switch(event.key) {
                case 'ArrowLeft':
                    event.preventDefault();
                    navigate('prev');
                    break;
                case 'ArrowRight':
                case ' ':
                    event.preventDefault();
                    navigate('next');
                    break;
                case 'f':
                case 'F':
                    event.preventDefault();
                    toggleFullscreen();
                    break;
                case 'Escape':
                    if (isFullscreen) {
                        event.preventDefault();
                        toggleFullscreen();
                    }
                    break;
            }
        });

        // Presentation Management
        function updatePresentationName() {
            const select = document.getElementById('presentation-select');
            const input = elements.presentationName;
            if (select && input && select.value) {
                input.value = select.value;
            }
        }

        async function loadPresentation() {
            let name = '';
            const select = document.getElementById('presentation-select');
            const input = elements.presentationName;
            
            if (select && select.value) {
                name = select.value;
            } else if (input && input.value) {
                name = input.value;
            }
            
            if (!name) return;
            
            try {
                const response = await fetch(`/api/presentation/load/${name}`);
                if (response.ok) {
                    const data = await response.json();
                    presentationState = data;
                    updateUI();
                } else {
                    alert('Failed to load presentation');
                }
            } catch (error) {
                console.error('Load failed:', error);
                alert('Failed to load presentation');
            }
        }

        // Navigation
        async function navigate(direction) {
            try {
                const response = await fetch(`/api/presentation/navigate/${direction}`, {
                    method: 'POST'
                });
                if (response.ok) {
                    const data = await response.json();
                    presentationState = data;
                    updateUI();
                }
            } catch (error) {
                console.error('Navigation failed:', error);
            }
        }

        // Fullscreen Management
        function toggleFullscreen() {
            isFullscreen = !isFullscreen;
            
            if (isFullscreen) {
                elements.fullscreenOverlay.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
                if (presentationState?.currentSlide) {
                    updateFullscreenContent(presentationState.currentSlide);
                }
            } else {
                elements.fullscreenOverlay.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            }
            
            const btn = document.getElementById('fullscreen-btn');
            btn.textContent = isFullscreen ? 'üî≤ Exit Fullscreen' : '‚õ∂ Fullscreen';
        }

        function updateFullscreenContent(slide) {
            if (!isFullscreen) return;
            
            let html = slide.htmlContent || slide.content;
            if (slide.type) {
                html = `<section class="${slide.type}">${html}</section>`;
            } else {
                html = `<section>${html}</section>`;
            }
            
            elements.fullscreenContent.innerHTML = html;
            
            // Inject CSS
            if (presentationState.css) {
                const style = document.createElement('style');
                style.textContent = presentationState.css;
                elements.fullscreenContent.appendChild(style);
            }
        }

        // Poll Management
        async function stopCurrentPoll() {
            if (!currentPoll) return;
            
            try {
                const response = await fetch(`/api/poll/${currentPoll.id}/stop`, {
                    method: 'POST'
                });
                if (response.ok) {
                    currentPoll = null;
                    updatePollUI();
                }
            } catch (error) {
                console.error('Stop poll failed:', error);
            }
        }

        async function activatePoll() {
            // Trigger navigation to activate poll automatically
            // This will be enhanced with manual poll activation
            console.log('Activating poll for current slide');
        }

        function manualStartPoll() {
            // Manual poll start functionality
            console.log('Manual poll start');
        }

        function toggleSlidePlay() {
            // Slide-specific play/pause functionality
            console.log('Toggle slide play');
        }

        // UI Update Functions
        function updateUI() {
            if (!presentationState) return;
            
            const { slideIndex, totalSlides, currentSlide, css } = presentationState;
            
            // Show/hide main content
            elements.noPresentation.classList.add('hidden');
            elements.slideDisplay.classList.remove('hidden');
            
            // Update slide info
            elements.slideCounter.textContent = `${slideIndex + 1} / ${totalSlides}`;
            elements.slideTitle.textContent = currentSlide?.title || 'Untitled';
            elements.slideType.textContent = currentSlide?.type || 'content';
            elements.slidePosition.textContent = `${slideIndex + 1} / ${totalSlides}`;
            
            // Update navigation buttons
            elements.prevBtn.disabled = slideIndex === 0;
            elements.nextBtn.disabled = slideIndex >= totalSlides - 1;
            
            // Update slide content
            if (currentSlide) {
                updateSlideContent(currentSlide);
                updateContextAwareUI(currentSlide);
                
                if (isFullscreen) {
                    updateFullscreenContent(currentSlide);
                }
            }
        }

        function updateSlideContent(slide) {
            let html = slide.htmlContent || slide.content;
            
            if (slide.type) {
                html = `<section class="${slide.type}">${html}</section>`;
            } else {
                html = `<section>${html}</section>`;
            }
            
            elements.slideHtml.innerHTML = html;
            
            // Inject Marp CSS
            if (presentationState.css) {
                elements.marpCss.innerHTML = `<style>${presentationState.css}</style>`;
            }
        }

        function updateContextAwareUI(slide) {
            // Determine if slide has poll or can have poll
            currentSlideHasPoll = slide.poll || slide.type === 'poll';
            const hasActivePoll = currentPoll && currentPoll.active;
            const showResults = slide.type === 'results';
            
            // Show/hide poll controls based on context
            if (currentSlideHasPoll || hasActivePoll) {
                elements.pollControlCard.classList.remove('hidden');
                
                if (hasActivePoll) {
                    elements.noPoll.classList.add('hidden');
                    elements.activePoll.classList.remove('hidden');
                    elements.pollPreview.classList.add('hidden');
                } else if (slide.poll) {
                    elements.noPoll.classList.add('hidden');
                    elements.activePoll.classList.add('hidden');
                    elements.pollPreview.classList.remove('hidden');
                    updatePollPreview(slide.poll);
                } else {
                    elements.noPoll.classList.remove('hidden');
                    elements.activePoll.classList.add('hidden');
                    elements.pollPreview.classList.add('hidden');
                }
            } else {
                elements.pollControlCard.classList.add('hidden');
            }
            
            // Show/hide QR code based on active poll
            if (hasActivePoll) {
                elements.qrControlCard.classList.remove('hidden');
                loadQRCode(currentPoll.id);
            } else {
                elements.qrControlCard.classList.add('hidden');
            }
            
            // Show/hide results based on slide type and active poll
            if (showResults && hasActivePoll) {
                elements.resultsCard.classList.remove('hidden');
                showResultsChart();
            } else {
                elements.resultsCard.classList.add('hidden');
            }
        }

        function updatePollPreview(poll) {
            document.getElementById('preview-question').textContent = poll.question;
            const optionsDiv = document.getElementById('preview-options');
            optionsDiv.innerHTML = '';
            optionsDiv.className = 'responsive-grid-sm';
            
            poll.options.forEach((option, index) => {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'text-xs bg-dark-700 px-2 py-1 rounded text-gray-300 text-center transition-all duration-200 hover:bg-dark-600';
                optionDiv.textContent = `${index + 1}. ${option}`;
                optionsDiv.appendChild(optionDiv);
            });
        }

        function updatePollUI() {
            if (currentPoll) {
                elements.pollStatusBadge.textContent = currentPoll.active ? 'Active' : 'Inactive';
                elements.pollStatusBadge.className = currentPoll.active ? 'poll-active-indicator' : 'poll-inactive-indicator';
                elements.voteCount.textContent = `${currentPoll.totalVotes} votes`;
                elements.pollQuestion.textContent = currentPoll.question;
                elements.currentPollId.textContent = currentPoll.id;
            }
            
            updateContextAwareUI(presentationState?.currentSlide);
        }

        async function loadQRCode(pollId) {
            try {
                const response = await fetch(`/api/qr/${pollId}`);
                if (response.ok) {
                    const data = await response.json();
                    elements.qrCode.src = data.qrCode;
                    elements.voteUrl.textContent = data.voteUrl;
                }
            } catch (error) {
                console.error('Failed to load QR code:', error);
            }
        }

        function showResultsChart() {
            if (!currentPoll) return;
            
            const ctx = document.getElementById('chart').getContext('2d');
            
            if (resultsChart) {
                resultsChart.destroy();
            }
            
            const labels = currentPoll.options.map(opt => opt.text);
            const data = currentPoll.options.map(opt => opt.votes);
            
            resultsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Votes',
                        data: data,
                        backgroundColor: [
                            '#667eea', '#f093fb', '#74b9ff', '#fd79a8', '#00cec9'
                        ].slice(0, data.length),
                        borderRadius: 4,
                        borderSkipped: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: currentPoll.question,
                            color: '#fff',
                            font: { size: 12 }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                color: '#9ca3af'
                            },
                            grid: { color: '#374151' }
                        },
                        x: {
                            ticks: { color: '#9ca3af' },
                            grid: { color: '#374151' }
                        }
                    }
                }
            });
        }

        // Socket Events
        socket.on('poll-started', (poll) => {
            currentPoll = poll;
            updatePollUI();
        });
        
        socket.on('vote-update', (poll) => {
            if (currentPoll && currentPoll.id === poll.id) {
                currentPoll = poll;
                updatePollUI();
                
                if (resultsChart) {
                    resultsChart.data.datasets[0].data = poll.options.map(opt => opt.votes);
                    resultsChart.update('none');
                }
            }
        });
        
        socket.on('poll-stopped', (poll) => {
            if (currentPoll && currentPoll.id === poll.id) {
                currentPoll.active = false;
                updatePollUI();
            }
        });
        
        socket.on('slide-changed', (data) => {
            presentationState = data;
            updateUI();
        });

        // Initialize
        fetch('/api/presentation/state')
            .then(response => response.json())
            .then(data => {
                if (data.ngrokUrl) {
                    document.getElementById('ngrok-status').classList.remove('hidden');
                    document.getElementById('public-url').textContent = data.ngrokUrl;
                }
                
                if (data.totalSlides > 0) {
                    presentationState = data;
                    updateUI();
                }
            })
            .catch(console.error);
    </script>
</body>
</html>